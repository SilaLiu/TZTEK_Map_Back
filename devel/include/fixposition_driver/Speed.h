// Generated by gencpp from file fixposition_driver/Speed.msg
// DO NOT EDIT!


#ifndef FIXPOSITION_DRIVER_MESSAGE_SPEED_H
#define FIXPOSITION_DRIVER_MESSAGE_SPEED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fixposition_driver
{
template <class ContainerAllocator>
struct Speed_
{
  typedef Speed_<ContainerAllocator> Type;

  Speed_()
    : speeds()  {
    }
  Speed_(const ContainerAllocator& _alloc)
    : speeds(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _speeds_type;
  _speeds_type speeds;





  typedef boost::shared_ptr< ::fixposition_driver::Speed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fixposition_driver::Speed_<ContainerAllocator> const> ConstPtr;

}; // struct Speed_

typedef ::fixposition_driver::Speed_<std::allocator<void> > Speed;

typedef boost::shared_ptr< ::fixposition_driver::Speed > SpeedPtr;
typedef boost::shared_ptr< ::fixposition_driver::Speed const> SpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fixposition_driver::Speed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fixposition_driver::Speed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fixposition_driver::Speed_<ContainerAllocator1> & lhs, const ::fixposition_driver::Speed_<ContainerAllocator2> & rhs)
{
  return lhs.speeds == rhs.speeds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fixposition_driver::Speed_<ContainerAllocator1> & lhs, const ::fixposition_driver::Speed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fixposition_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver::Speed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fixposition_driver::Speed_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver::Speed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fixposition_driver::Speed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver::Speed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fixposition_driver::Speed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fixposition_driver::Speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00264f61d2b8d6e211424a49de9947b3";
  }

  static const char* value(const ::fixposition_driver::Speed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00264f61d2b8d6e2ULL;
  static const uint64_t static_value2 = 0x11424a49de9947b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::fixposition_driver::Speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fixposition_driver/Speed";
  }

  static const char* value(const ::fixposition_driver::Speed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fixposition_driver::Speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####################################################################################################\n"
"#\n"
"#    Copyright (c) 2021  ___     ___\n"
"#                       \\\\  \\\\  /  /\n"
"#                        \\\\  \\\\/  /\n"
"#                         /  /\\\\  \\\\\n"
"#                        /__/  \\\\__\\\\  Fixposition AG\n"
"#\n"
"####################################################################################################\n"
"#\n"
"# Wheel speed input to Fixposition ROS Driver\n"
"#\n"
"#\n"
"####################################################################################################\n"
"\n"
"# Velocity values in [mm/s] as integer 32bit\n"
"# 2 Options:\n"
"# Option 1: only one vehicle speed, then only fill a single value as the vehicle speed\n"
"# Option 2: Fill in 4 Values of 4 wheels, in the order of FR, FL, RR, RL\n"
"int32[] speeds\n"
;
  }

  static const char* value(const ::fixposition_driver::Speed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fixposition_driver::Speed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speeds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Speed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fixposition_driver::Speed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fixposition_driver::Speed_<ContainerAllocator>& v)
  {
    s << indent << "speeds[]" << std::endl;
    for (size_t i = 0; i < v.speeds.size(); ++i)
    {
      s << indent << "  speeds[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.speeds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIXPOSITION_DRIVER_MESSAGE_SPEED_H
